### Why you still see the old “Breakfast / Mains …” categories

1. **Client is still importing the dummy JSON** ( `client/src/data/menu.ts` or similar) instead of calling the new `/api/menu` endpoint.
2. The **/api/menu route may not be mounted** (or returns 404), so the fetch you added falls back to empty and React still renders hard-coded tabs.

We’ll fix both in two precise edits and one file delete.

---

## A.  Confirm the server route really exists

Make sure you have **`server/routes/menu.ts`** exactly like this and that it’s mounted:

```ts
// server/routes/menu.ts
import { Router } from "express";
import { db } from "../db";
import { menu_items } from "../../shared/schema";

export const menuRouter = Router();

menuRouter.get("/api/menu", async (_req, res) => {
  const rows = await db.select().from(menu_items);
  res.json(rows);
});
```

and in `server/index.ts`

```ts
import { menuRouter } from "./routes/menu";
app.use(menuRouter);
```

Restart `npm run dev` and verify:

```bash
curl http://localhost:5000/api/menu | head
```

You should see JSON with your Creole items. If that works, the backend is fine.

---

## B.  Delete the hard-coded dummy data file

```bash
rm client/src/data/menu.ts            # or whatever file holds the fake categories
```

Commit the deletion later.

---

## C.  Replace the Menu logic inside **`ServerPad.tsx`**

Below is a drop-in functional component that:

* fetches `/api/menu` once
* builds category list dynamically
* updates cart totals

Overwrite the existing `ServerPad.tsx` with this:

```tsx
import React, { useEffect, useState } from "react";

type Item = {
  square_id: string;
  name: string;
  price_cents: number;
  category: string;
};

export default function ServerPad() {
  const [floor, setFloor] = useState<number | null>(null);
  const [bay, setBay] = useState<number | null>(null);
  const [items, setItems] = useState<Item[]>([]);
  const [cart, setCart] = useState<Record<string, number>>({});
  const [cat, setCat] = useState<string>("");

  /* -------- fetch menu once -------- */
  useEffect(() => {
    fetch("/api/menu")
      .then((r) => r.json())
      .then((data: Item[]) => {
        setItems(data);
        if (data.length) setCat(data[0].category);
      });
  }, []);

  /* -------- early UI: pick floor/bay -------- */
  if (floor === null)
    return (
      <div className="p-4">
        <h1 className="text-xl mb-2">Select Floor</h1>
        {[1, 2, 3].map((f) => (
          <button key={f} className="px-4 py-2 m-1 bg-gray-200" onClick={() => setFloor(f)}>
            Floor {f}
          </button>
        ))}
      </div>
    );

  if (bay === null)
    return (
      <div className="p-4">
        <h1 className="text-xl mb-2">Floor {floor} – Pick Bay</h1>
        {Array.from({ length: 26 }, (_, i) => 100 * floor + 1 + i).map((b) => (
          <button key={b} className="px-3 py-1 m-1 bg-gray-200" onClick={() => setBay(b)}>
            {b}
          </button>
        ))}
    </div>
    );

  /* -------- main menu UI -------- */
  const cats = [...new Set(items.map((i) => i.category))];
  const add = (id: string) => setCart((c) => ({ ...c, [id]: (c[id] || 0) + 1 }));
  const total = Object.entries(cart).reduce(
    (sum, [id, q]) => sum + (items.find((i) => i.square_id === id)?.price_cents || 0) * q,
    0
  );

  return (
    <div className="flex gap-4 p-4">
      <div className="flex-1">
        {/* category tabs */}
        <div className="mb-2">
          {cats.map((c) => (
            <button
              key={c}
              className={`mr-1 px-2 py-1 ${c === cat ? "bg-blue-600 text-white" : "bg-gray-200"}`}
              onClick={() => setCat(c)}
            >
              {c}
            </button>
          ))}
        </div>

        {/* items grid */}
        <div className="grid grid-cols-2 gap-2">
          {items
            .filter((i) => i.category === cat)
            .map((i) => (
              <button
                key={i.square_id}
                onClick={() => add(i.square_id)}
                className="border p-2 text-left"
              >
                <div>{i.name}</div>
                <div className="text-sm">${(i.price_cents / 100).toFixed(2)}</div>
              </button>
            ))}
        </div>
      </div>

      {/* cart */}
      <div className="w-56 border-l pl-2">
        <h2 className="font-bold mb-2">Bay {bay}</h2>
        {Object.entries(cart).length === 0 && <div>No items</div>}
        {Object.entries(cart).map(([id, q]) => {
          const itm = items.find((i) => i.square_id === id)!;
          return (
            <div key={id} className="flex justify-between">
              <span>{q}× {itm.name}</span>
              <span>${((itm.price_cents * q) / 100).toFixed(2)}</span>
            </div>
          );
        })}
        <hr className="my-2" />
        <div className="text-right font-bold">
          ${ (total / 100).toFixed(2) }
        </div>
        <button
          className="mt-4 w-full bg-green-600 text-white py-2 rounded"
          onClick={() => console.log("SEND payload:", { floor, bay, cart })}
        >
          SEND (placeholder)
        </button>
      </div>
    </div>
  );
}
```

---

## D.  Restart and test

```bash
npm run dev
```

* Pick Floor 1 → Bay 101 → see real categories from DB.  
* Adding items updates totals.  
* Console logs payload on SEND.

---

### After you confirm the real menu shows

Commit the changes:

```bash
git add client/src/pages/ServerPad.tsx server/routes/menu.ts server/index.ts
git rm client/src/data/menu.ts       # if that file existed
git commit -m "ServerPad uses real /api/menu; dummy menu removed"
git push origin main
```

Then we’ll wire the **raw POST /v2/orders** call to Square so “SEND” actually creates an OPEN ticket.