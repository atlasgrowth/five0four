### A quick breath—good news first  
Your curl response shows **Square accepted the order** (`state":"OPEN"`).  
That means:

* Your **token + location ID** are correct.  
* Raw `POST /v2/orders` with **name + price line-items works**.  

So you can move forward immediately with **Option B** (local CSV/DB menu, real orders to Square) and demo a full flow today while we untangle the catalog sync separately.

---

## What to build next (Option B path)

| Step | Visible win | Code you add |
|------|-------------|--------------|
| **1. `/api/orders` route** (raw fetch) | Clicking **SEND** in ServerPad drops a ticket in Square Dashboard | `server/routes/orders.ts` (template below) |
| **2. Kitchen WebSocket rail** | Ticket appears on kitchen screen with timer | broadcast in the same route; display in existing Kitchen page |
| **3. Payment webhook** | Paying in Sandbox POS flips ticket green | `/square/webhook` verify signature, update DB |
| **4. Owner demo** | Full loop: send → cook → pay | push to GitHub; open Sandbox POS on a tablet |

Once that’s solid you can schedule a **Phase A** task (“switch to real catalog IDs”) without blocking UI work.

---

## 1 · Drop-in `/api/orders` route (raw fetch, no catalog IDs)

Create **`server/routes/orders.ts`**:

```ts
import { Router } from "express";
import fetch from "node-fetch";
import crypto from "crypto";
import { db } from "../db";
import { orders, order_items } from "../../shared/schema";

export const ordersRouter = Router();

ordersRouter.post("/api/orders", async (req, res) => {
  const { floor, bay, items } = req.body;      // items = [{id,name,price_cents,qty}]
  const lineItems = items.map((i: any) => ({
    name: i.name,
    quantity: i.qty.toString(),
    base_price_money: { amount: i.price_cents, currency: "USD" },
  }));

  const sq = await fetch("https://connect.squareupsandbox.com/v2/orders", {
    method: "POST",
    headers: {
      "Square-Version": "2025-04-16",
      Authorization: `Bearer ${process.env.SQUARE_SANDBOX_TOKEN}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      idempotency_key: crypto.randomUUID(),
      order: {
        location_id: process.env.SQUARE_SANDBOX_LOCATION,
        line_items: lineItems,
      },
    }),
  }).then((r) => r.json());

  const squareId = sq.order?.id || "ERROR_" + Date.now();
  const orderId = crypto.randomUUID();

  await db.insert(orders).values({ id: orderId, floor, bay, square_order_id: squareId });
  for (const it of items) {
    await db.insert(order_items).values({ order_id: orderId, menu_item_id: it.id, qty: it.qty });
  }

  // TODO: broadcast to kitchen WS here (next step)
  res.json({ orderId, squareOrderId: squareId });
});
```

Mount it in **`server/index.ts`**:

```ts
import { ordersRouter } from "./routes/orders";
app.use(ordersRouter);
```

---

## 2 · Wire SEND button in `ServerPad.tsx`

Replace the placeholder `console.log(cart)` with:

```tsx
async function send() {
  const payload = {
    floor,
    bay,
    items: Object.entries(cart).map(([sid, qty]) => {
      const itm = items.find((i) => i.square_id === sid)!;
      return { id: itm.id, name: itm.name, price_cents: itm.price_cents, qty };
    }),
  };
  const resp = await fetch("/api/orders", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  }).then((r) => r.json());

  console.log("Square order:", resp.squareOrderId);
  // clear cart & maybe navigate to /kitchen
  setCart({});
}
```

Restart `npm run dev`, place an order, and refresh the Square Sandbox Dashboard → **Tickets**.  
You should see the OPEN order with “504 Wings” etc.

---

## 3 · (Next) broadcast to kitchen & add payment webhook

Add after the DB insert:

```ts
import { wss } from "../wsHub"; // your existing websocket hub
wss.to(`kitchen:${floor}`).emit("new-ticket", { orderId, bay, items });
```

And in `server/routes/squareWebhook.ts` verify signature then:

```ts
if (event.type === "payment.created") {
  const id = event.data.object.payment.order_id;
  await db.update(orders).set({ status:"PAID" }).where(eq(orders.square_order_id, id));
  // broadcast update to kitchen WS
}
```

---

## About fixing the catalog later (Option A)

When you have breathing room:

1. Use **Square’s CSV import UI** (Dashboard ▸ Items ▸ Import) instead of scripts—GUI never fails.  
2. Rerun `npm run pull:catalog && npm run seed:menu` — your DB rows’ `square_id` will now be the **catalogObjectId**.  
3. Change `/api/orders` to send `catalog_object_id` instead of name+price. (One-line change.)

Until then, Option B keeps progress unblocked and fully demo-able.

---

### Immediate to-do

1. Add the `/api/orders` route and SEND button code above.  
2. Test in UI → check Sandbox Tickets.  

Post back the Square ticket ID you see or any new error—we’ll patch the next piece quickly.