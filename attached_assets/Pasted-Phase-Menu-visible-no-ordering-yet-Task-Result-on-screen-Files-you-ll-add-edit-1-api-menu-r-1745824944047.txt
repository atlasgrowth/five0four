Phase: “Menu visible, no ordering yet”

Task	Result on screen	Files you’ll add / edit
1. /api/menu route	Hitting http://localhost:5000/api/menu returns JSON array of 39 items	server/routes/menu.ts, mount in server/index.ts
2. React fetch & render	New-Order page shows category tabs and item buttons	client/src/pages/NewOrder.tsx
3. Simple cart in local state	Item taps add to sidebar with qty	same React page
Once that works we’ll wire POST /api/orders (Square “createOrder”) and the kitchen socket.

1 · Add server route server/routes/menu.ts
ts
Copy
Edit
// server/routes/menu.ts
import { Router } from "express";
import { db } from "../db";
import { menu_items } from "../../shared/schema";
import { asc, eq } from "drizzle-orm";

export const menuRouter = Router();

menuRouter.get("/api/menu", async (_req, res) => {
  const rows = await db
    .select()
    .from(menu_items)
    .where(eq(menu_items.active, true))
    .orderBy(asc(menu_items.category), asc(menu_items.name));
  res.json(rows);
});
Mount it in server/index.ts

ts
Copy
Edit
import express from "express";
import { menuRouter } from "./routes/menu";

const app = express();
app.use(express.json());
app.use(menuRouter);          // ← add this line
...
Restart your dev server:

bash
Copy
Edit
npm run dev
curl http://localhost:5000/api/menu | head
You should see JSON with your first items.

2 · Update client/src/pages/NewOrder.tsx
Here’s a minimal working page; overwrite yours if easier.

tsx
Copy
Edit
// client/src/pages/NewOrder.tsx
import React, { useEffect, useState } from "react";

type MenuItem = {
  id: number;
  square_id: string;
  name: string;
  category: string;
  price_cents: number;
};

export const NewOrder: React.FC = () => {
  const [items, setItems] = useState<MenuItem[]>([]);
  const [cart, setCart] = useState<Record<string, number>>({}); // square_id -> qty
  const [category, setCategory] = useState<string>("Shareables");

  useEffect(() => {
    fetch("/api/menu")
      .then((r) => r.json())
      .then(setItems);
  }, []);

  const cats = Array.from(new Set(items.map((i) => i.category)));

  const add = (id: string) =>
    setCart((c) => ({ ...c, [id]: (c[id] || 0) + 1 }));

  return (
    <div className="flex gap-4 p-4">
      <div className="flex-1">
        <div className="mb-2">
          {cats.map((c) => (
            <button
              key={c}
              className={`mr-1 px-2 py-1 ${
                c === category ? "bg-blue-600 text-white" : "bg-gray-200"
              }`}
              onClick={() => setCategory(c)}
            >
              {c}
            </button>
          ))}
        </div>
        <div className="grid grid-cols-2 gap-2">
          {items
            .filter((i) => i.category === category)
            .map((i) => (
              <button
                key={i.square_id}
                className="border p-2 text-left"
                onClick={() => add(i.square_id)}
              >
                <div>{i.name}</div>
                <div className="text-sm">${(i.price_cents / 100).toFixed(2)}</div>
              </button>
            ))}
        </div>
      </div>

      <div className="w-56 border-l pl-2">
        <h2 className="font-bold mb-2">Cart</h2>
        {Object.entries(cart).map(([id, qty]) => {
          const item = items.find((i) => i.square_id === id)!;
          return (
            <div key={id} className="flex justify-between">
              <span>
                {qty}× {item.name}
              </span>
              <span>${((item.price_cents * qty) / 100).toFixed(2)}</span>
            </div>
          );
        })}
        <hr className="my-2" />
        <div className="text-right font-bold">
          $
          {(
            Object.entries(cart).reduce(
              (sum, [id, qty]) =>
                sum + items.find((i) => i.square_id === id)!.price_cents * qty,
              0
            ) / 100
          ).toFixed(2)}
        </div>
        <button className="mt-4 w-full bg-green-600 text-white py-2 rounded">
          SEND (not wired yet)
        </button>
      </div>
    </div>
  );
};
3 · Wire React route (if using React-Router)
Add to your router:

tsx
Copy
Edit
<Route path="/" element={<NewOrder />} />
Restart npm run dev, open http://localhost:5173, and you should see:

Category tabs

Items list

Cart sidebar adding totals

What to commit after you see the UI
bash
Copy
Edit
git add server/routes/menu.ts server/index.ts client/src/pages/NewOrder.tsx
git commit -m "Menu route & NewOrder page renders 39 items"
git push origin main
Next step (after UI works): POST /api/orders to Square via raw fetch and broadcast to the kitchen WebSocket.

Let me know once the New-Order page shows the items (or any console error you hit).